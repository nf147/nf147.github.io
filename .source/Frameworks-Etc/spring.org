#+TITLE: Spring Framework


* vs. 工厂模式

#+BEGIN_SRC java
  public class ServiceFactory {
      public Object getServiceObject (String name) {
          if (name.equals("bs")) {
              A a = new A();
              B b = new B(a); // 构造器
              MyBatiscConnection conn = new MyBatiscConnection();
              LogUtil log = new LogUtil();
              BookService bookservice = new BookService();

              b.setA(a); // setter
              conn.setB(b);
              bookservice.setConn(conn);
              LogUtil.setConn(conn);
              bookservice.setLogger(log);

              return bookservice;
          }
      }
  }

  main () {
      ServiceFactory sf = new ServiceFactory();

      BookService bookservice = sf.getServiceObject("bs");
      bookservice.sellBook();
  }
#+END_SRC

将工厂模式切割，分为解析程序和 xml 文件。

xml 暴露出来，用来 *描述* 工厂需要实例化的类以及他们之间的关系。

#+BEGIN_SRC sgml
  <xml>
    <!-- 之前命令；描述 -->
    <bean id="a" class="xxx.yyy.A" />
    <bean id="b" class="xxx.yyy.B">
      <property name="a" bean="a" />
    </bean>
    <bean id="conn" class="xxx.yyy.MyBConn">
      <property name="b" bean="b" />
    </bean>
    <bean id="log" class="xxx.yyy.LogUtil">
      <property name="conn" bean="conn" />
    </bean>
    <bean id="bookservice" class="xxx.BookService">
      <property name="conn" bean="conn" />
      <property name="log" bean="log" />
    </bean>
  </xml>
#+END_SRC

* 接口

最核心的 jar 包:
- spring-core
- spring-bean
- spring-context

最核心的接口是 ~BeanFactory~，它用来描述 IOC 容器:

#+DOWNLOADED: c:/Users/nf147/AppData/Local/Temp/clip.png @ 2018-12-13 03:01:52
[[file:img/clip_2018-12-13_03-01-52.png]]

它很干净，很纯粹，最主要的方法是 ~getBean~ 用来给调用方返回一个实例化好的对象。

在实际运用中，需要一些周边功能，比如加载资源/国际化/等等，Spring 为此提供了 ~ApplicatinContext~
接口。它本身是 BeanFactory 的一个实现:

[[file:img/clip_2018-12-13_03-04-54.png]]

可以看到，ApplicationContext 除了实现了 BeanFactory，还实现了其他一些
实用的接口。因此，它是在 Spring 中操作一切的核心。

这是 *门面模式* 的一种典型使用。


* 配置
** 传统的方式 xml

这种方式，充分利用了 xml 文件的优势:
- 接受度比较高，语法简单
- 表达能力比较强
- 生态比较完整，基于 xml 的校验、解析等比较完善

所以，最开始的时候，描述工厂里 bean 声明的方式，选用的就是 xml

#+BEGIN_SRC sgml
  <?xml version="1.0" encoding="UTF-8"?>
  <beans xmlns="http://www.springframework.org/schema/beans"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

      <bean id="bs1" class="learning.spring.BookServiceImpl" />
      <bean id="bs2" class="learning.spring.BookService2Impl" />

      <!--<bean id="bs2" class="learning.spring.BookServiceImplImpl" />-->

      <!--<bean id="bs3" class="learning.spring.BookServiceImplImpl" />-->
  </beans>
#+END_SRC

但是:
- 很多人不喜欢 xml 这种标签式的语法。写起来麻烦，看起来不舒服
- xml 方式过于重型
- xml 语法校验虽然强大，但不够强大
- xml 虽然灵活，但不够灵活

所以，就产生了很多其他的叛逆的想法

** 基于 Java 的方式进行配置

#+BEGIN_SRC java
  @Configuration
  public class SuibianSpringConfig {

      // <bean id="bs1" class="learning.spring.BookServiceImpl" />
      @Bean
      public BookService bs1() {
          if (Math.random() > 0.5) {
              // 接口注入
              return new BookService2Impl(bookDAO());
          } else {
              // setter 注入
              BookService bs = new BookServiceImpl();
              bs.setBookDAO(bookDAO());
              return bs;
          }
      }
    
      @Bean
      public BookDAO bookDAO () {
          return new BookDAO();
      }
  }

#+END_SRC

** 混合双打

Java Style 中混入 XML Style:
#+BEGIN_SRC java
  @Configuration
  @ImportResource(locations = "learning/spring/my-spring.xml")
  public class SuibianSpringConfig {

      // <bean id="bs1" class="learning.spring.BookServiceImpl" />
      @Bean
      public BookService bs1() {
          System.out.println(bookDAO());
          if (Math.random() > 0.5) {
              return new BookService2Impl();
          } else {
              return new BookServiceImpl();
          }
      }

      @Bean
      public BookDAO bookDAO () {
          return new BookDAO();
      }
  }

#+END_SRC

XML style 中混入 Java Style:
#+BEGIN_SRC sgml
  <?xml version="1.0" encoding="UTF-8"?>
  <beans xmlns="http://www.springframework.org/schema/beans"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

      <bean id="bs2" class="learning.spring.BookService2Impl" />
      <bean class="learning.spring.configuration.SuibianSpringConfig" />
  </beans>
#+END_SRC
