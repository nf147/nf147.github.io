#+TITLE: Spring Web MVC



* 基本配置

在 Web.xml 中配置前端控制器，让 Spring MVC 拦截处理所有的请求:
#+BEGIN_SRC sgml
  <servlet>
    <servlet-name>web</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring/web-mvc.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>web</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>
#+END_SRC

Spring MVC 在启动的时候会初始化容器，所以需要通过 xml 配置其容器的初始化。Spring-Mvc.xml:
#+BEGIN_SRC sgml
  <!--启用注解扫描-->
  <context:component-scan base-package="com.nf147.post.controller" />

  <!--启用 mvc 的常用注解-->
  <mvc:annotation-driven enable-matrix-variables="true" />

  <!--将所有的静态资源交还 Servlet 处理-->
  <mvc:default-servlet-handler />

  <!--配置返回页面-->
  <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
    <property name="prefix" value="/WEB-INF/jsp/" />
    <property name="suffix" value=".jsp" />
  </bean>
#+END_SRC

* DispatcherServlet

前端控制器，所有来自客户端的请求，都会交由它去处理。

基本工作机制:
- 

* Controller
** hello, world

传统的方式：
#+BEGIN_SRC java
  // 1. 实现 Controller 接口
  // 2. 重写 handleRequest 方法
  // 注意，方法的返回值是 ModelAndView
  public class DemoController implements Controller {
      @Override
      public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
          return new ModelAndView("demo", "msg", "hello, world");  // 返回 demo 页面，会在 request 里保存一个 msg 的变量，值为 hello, world
      }
  }

  // 然后，在 spring-mvc.xml 中添加:
  //   <bean name="/hello" value="xxx.DemoController" />
  //
  // 随后，就可以在浏览器中访问了
  //   http://localhost:8080/hello
#+END_SRC

可以使用相关注解简化其操作:
#+BEGIN_SRC java
  @Controller
  public class DemoController {
      @RequestMapping("/")
      public String handleRequest(Model model) {
          model.addAttribute("msg", "hello, world");
          return "demo";
      }
  }

  // 这种写法跟上面是等价的，不过更简单清爽。并且一个 Controller 类里面可以放置多个 handler
  // 另外，注意，在配置文件中要开启注解扫描 <context:component-scan .. />
#+END_SRC

** RequestMapping

- @RequestMapping
- @GetMapping
- @PostMapping
- @XxxMapping

参数:
- name
- required

** Handler 参数

特殊含义的参数:
- 


** Handler 返回值

* Controller 相关
** RedirectionAttributes

** @ModelAttribute

** 操作 HttpSession

* Conversion (类型转换)
* Validation (验证)
* Exception (异常处理)
* View

* File Upload (文件上传)
* I18N (国际化)
* RESTful
