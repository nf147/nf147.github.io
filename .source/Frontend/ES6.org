#+TITLE: _ES6


* 模块

JS 是一门仓促产生的语言，
在产生的时候，很多特性都不具备。

比如说，模块、命名空间。

这样就导致了很多问题。

所以，就产生了很多的第三方实现。

** CommonJS 规范

两个主要 api:
- module.exports = {}
- require('xxx')

** AMD 规范

requirejs 是他的一个主要实现。

** 其他规范
*** UMD规范

语法丑陋，但是兼容了 CommonJS 和 AMD

*** CMD 规范

是中国人搞的

** es6 Module

经过了漫长的岁月，终于，在 es6 中出现了语言级别的
模块概念。

它有两个基本 api:
- export
- import x from 'xxx'

语法示例如下:
#+BEGIN_SRC js
  // 略
#+END_SRC


* 前端工程化
** babel

https://babeljs.io/

这是一个翻译工具。
我们使用 es6/es7 等新的语法编程，
经过 babel 的翻译之后，它就能兼容不支持 es6/7 的浏览器。

它能把使用 es6/es7 等语法的文件，
根据配置翻译成能够在指定浏览器使用的文件。

比如说，你可以指定，让它翻译成能够在 ie6 下面使用的使用。

你可以指定，让它翻译成能够兼容 ie8 的文件。

你也可以指定，让它翻译成能够兼容 ie10 的文件。

** npm/yarn

包的管理工具

- https://www.npmjs.com/
- https://www.npmjs.com.cn/

下载插件，下载工具，简单的任务管理。

npm(nodejs package manager)，它是伴随 nodejs 出现的一个工具包。

使用相当简单。

第一步，下载。

第二步，安装。

第三步，使用。

基本命令如下:
#+BEGIN_SRC sh
  # 添加国内源
  npm config list
  npm config set registry=https://registry.npm.taobao.org

  # 初始化一个项目，在项目下面创建基本的配置文件 package.json
  # package.json 是属于 CommonJS 规范的一个配置文件
  # 因为 npm 使用的是 CommonJS 规范，所以，他也使用了同样的 package.json 作为它的配置文件
  npm init

  # 下载一个插件
  # 下载完之后，默认会安装到当前目录下的 node_moduels 文件夹里
  npm install jquery
  npm install electron --global
  npm install vue

  # 删除掉
  npm uninstall jquery

  # 运行简单命令
  npm run hahaha
  # "scripts": {
  #   "hahaha": "ipconfig",
  #   "test": "echo \"Error: no test specified\" && exit 1"
  # },
#+END_SRC

** Webpack

用来:
1. 打包资源
2. 通过一定的插件，进行任务的集成（自动化任务）

** 其他的脚手架

cli: command line interface，命令行工具
